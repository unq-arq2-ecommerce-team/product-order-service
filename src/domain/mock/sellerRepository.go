// Code generated by MockGen. DO NOT EDIT.
// Source: seller.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	"github.com/unq-arq2-ecommerce-team/products-orders-service/src/domain/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSellerRepository is a mock of SellerRepository interface.
type MockSellerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSellerRepositoryMockRecorder
}

// MockSellerRepositoryMockRecorder is the mock recorder for MockSellerRepository.
type MockSellerRepositoryMockRecorder struct {
	mock *MockSellerRepository
}

// NewMockSellerRepository creates a new mock instance.
func NewMockSellerRepository(ctrl *gomock.Controller) *MockSellerRepository {
	mock := &MockSellerRepository{ctrl: ctrl}
	mock.recorder = &MockSellerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSellerRepository) EXPECT() *MockSellerRepositoryMockRecorder {
	return m.recorder
}

// FindById mocks base method.
func (m *MockSellerRepository) FindById(ctx context.Context, id int64) (*model.Seller, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", ctx, id)
	ret0, _ := ret[0].(*model.Seller)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockSellerRepositoryMockRecorder) FindById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockSellerRepository)(nil).FindById), ctx, id)
}
